// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.21.0
// source: wkrrepos.sql

package database

import (
	"context"
	"database/sql"
)

const getAreReposFinished = `-- name: GetAreReposFinished :one

WITH d AS (VALUES(1))
SELECT kv.v IS NOT NULL AS is_finished
FROM d
LEFT JOIN kvstore kv ON k = 'entity-ts'
`

func (q *Queries) GetAreReposFinished(ctx context.Context) (bool, error) {
	row := q.db.QueryRowContext(ctx, getAreReposFinished)
	var is_finished bool
	err := row.Scan(&is_finished)
	return is_finished, err
}

const getRepos = `-- name: GetRepos :one

SELECT owner_name, repo_name, cursor_manifest, cursor_dep
FROM repos
WHERE animate_ts < last_ts
LIMIT 1
`

type GetReposRow struct {
	OwnerName      string
	RepoName       string
	CursorManifest sql.NullString
	CursorDep      sql.NullString
}

func (q *Queries) GetRepos(ctx context.Context) (GetReposRow, error) {
	row := q.db.QueryRowContext(ctx, getRepos)
	var i GetReposRow
	err := row.Scan(
		&i.OwnerName,
		&i.RepoName,
		&i.CursorManifest,
		&i.CursorDep,
	)
	return i, err
}

const insertDonation = `-- name: InsertDonation :exec

INSERT INTO donations (sponsor_id, recipient_id, last_ts)
VALUES (?, ?, ?)
ON CONFLICT (sponsor_id, recipient_id)
DO NOTHING
`

type InsertDonationParams struct {
	SponsorID   string
	RecipientID string
	LastTs      int64
}

func (q *Queries) InsertDonation(ctx context.Context, arg InsertDonationParams) error {
	_, err := q.db.ExecContext(ctx, insertDonation, arg.SponsorID, arg.RecipientID, arg.LastTs)
	return err
}

const repoUpdateAnimateTs = `-- name: RepoUpdateAnimateTs :exec

UPDATE repos
SET animate_ts = UNIXEPOCH()
WHERE owner_name = ? AND repo_name = ?
`

type RepoUpdateAnimateTsParams struct {
	OwnerName string
	RepoName  string
}

func (q *Queries) RepoUpdateAnimateTs(ctx context.Context, arg RepoUpdateAnimateTsParams) error {
	_, err := q.db.ExecContext(ctx, repoUpdateAnimateTs, arg.OwnerName, arg.RepoName)
	return err
}

const repoUpdateCursorDep = `-- name: RepoUpdateCursorDep :exec

UPDATE repos
SET cursor_dep = ?
WHERE owner_name = ? AND repo_name = ?
`

type RepoUpdateCursorDepParams struct {
	CursorDep sql.NullString
	OwnerName string
	RepoName  string
}

func (q *Queries) RepoUpdateCursorDep(ctx context.Context, arg RepoUpdateCursorDepParams) error {
	_, err := q.db.ExecContext(ctx, repoUpdateCursorDep, arg.CursorDep, arg.OwnerName, arg.RepoName)
	return err
}

const repoUpdateCursorManifest = `-- name: RepoUpdateCursorManifest :exec

UPDATE repos
SET cursor_manifest = ?
WHERE owner_name = ? AND repo_name = ?
`

type RepoUpdateCursorManifestParams struct {
	CursorManifest sql.NullString
	OwnerName      string
	RepoName       string
}

func (q *Queries) RepoUpdateCursorManifest(ctx context.Context, arg RepoUpdateCursorManifestParams) error {
	_, err := q.db.ExecContext(ctx, repoUpdateCursorManifest, arg.CursorManifest, arg.OwnerName, arg.RepoName)
	return err
}
